Q1: How did viewing a diff between two versions of a file help you see the bug that was introduced?

A1: The convention used by the u flag (-u) made it easier to spot the typo-error between the two versions

Q2: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

A2: It allows a programmer to be able to track changes and correct errors or reverse changes during the lifetime of a given project

Q3: What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

A3: Pros of manually choosing when to create a commit - 1, You have the choice to commit when you want to. 2, You have the control over what changes you want to save/take note of. 3, You are able to create commits that are meaningful to you and the process in your projectx
Cons: You may end up with too many commits

Q4: Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

A4: Git allows saving multiple files in one commit because it is possible that a user/programmer chnages a file/part of project multiple times 

Q5: How can you use the commands git log and git diff to view the history of files?

A5: git log allows a user to see the log of the changes done to a file/project and git diff helps to keep track of the changes made to that project/file

Q6: How might using version control make you more confident to make changes that could break something?

A6: Using version control could make a user more confident since they can easily find the changes made

Q7: Now that you have your workspace set up, what do you want to try using Git for?

A7: I want to use git to work on personal projects and also work with other people on their projects
